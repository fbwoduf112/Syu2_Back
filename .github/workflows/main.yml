name: Spring Boot CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SPRING_PROFILES_ACTIVE: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate application.properties from secret
        run: |
          mkdir -p ./src/main/resources
          cat <<EOF > ./src/main/resources/application.properties
          ${{ secrets.APPLICATION_PROPERTIES }}
          EOF

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle (Skip Tests)
        run: ./gradlew clean build -x test --no-daemon

      - name: Copy JAR to remote EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/demo-0.0.1-SNAPSHOT.jar"
          target: "/home/ubuntu/QrStore"

      - name: Restart Spring Boot on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use node
            cd /home/ubuntu/QrStore/build/libs
            echo "üì¶ ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨ ÌååÏùº Î™©Î°ù:"
            ls -al
            JAR_NAME=$(ls -t *.jar | head -n 1)
            echo "üì¶ Í∞ÄÏû• ÏµúÏã† JAR: $JAR_NAME"
            pm2 delete demo-app || true
            pm2 start "java -jar $JAR_NAME" --name demo-app
            pm2 save
